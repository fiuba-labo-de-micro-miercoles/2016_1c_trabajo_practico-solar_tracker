;-------------------------------------------------------------------------
;
;							SOLAR_PANEL.inc
;				
;-------------------------------------------------------------------------
.CSEG

SOLAR_PANEL_INIT:
	INPUT AUX,DDRC
	ANDI AUX,(~((1<<DDC0)|(1<<DDC1)))	;Mascara para tocar los leds del panel solar
	ORI AUX,((1<<DDC0)|(1<<DDC1))
	OUTPUT DDRC,AUX
	RCALL INDICATE_SOLAR_PANEL_LOW

	;INICIALIZO LA INFORMACION DE LA TENSION PARA TRANSMITIR POR BLUETOOTH
	LDIW X,V_SOLAR_PANEL_DATA
	STI	X+,'0'
	STI	X+,'0'
	STI	X+,'.'
	STI	X+,'0'
	STI	X+,'V'
	STI X+,'\r'
	STI X+,'\n'
	STI	X,0

RET

READ_V_SOLAR_PANEL:
;RECIBE: NADA
;DEVUELVE: TENSION DEL PANEL EN ADC_DATA_H
	LDI ADC_DATA_L,ADC_SOLAR_PANEL			;ELIJO EL PIN DEL PANEL SOLAR
	RCALL ADC_SELECT_INPUT					;LLAMO LA FUNCION PARA SELECCIONAR EL PANEL SOLAR
	RCALL ADC_SIMPLE_CONVERSION				;LLAMO LA FUNCION PARA MEDIR
RET

CHECK_IF_SOLAR_PANEL_MINIMUM:
	CLC
	CPI		ADC_DATA_H,MIN_SOLAR_PANEL_VALUE	;COMPARAR PARA VER SI HAY SUFICIENTE BATERIA PARA OPERAR
	BRCS	_INDICATE_SOLAR_PANEL_LOW						;[CARRY=1]: SOLAR_PANEL LOW. [CARRY=0]: SOLAR_PANEL OK
	RCALL INDICATE_SOLAR_PANEL_OK
	
RETURN_INDICATE_SOLAR_PANEL_LOW:
RET

_INDICATE_SOLAR_PANEL_LOW:
	RCALL INDICATE_SOLAR_PANEL_LOW
	SEC										;[CARRY=1]: SOLAR_PANEL LOW. [CARRY=0]: SOLAR_PANEL OK
RJMP RETURN_INDICATE_SOLAR_PANEL_LOW

INDICATE_SOLAR_PANEL_LOW:
	INPUT	AUX,PORTC
	ANDI	AUX,(~((1<<PIN_SOLAR_PANEL_LED_OK)|(1<<PIN_SOLAR_PANEL_LED_LOW)))
	ORI		AUX,((1<<PIN_SOLAR_PANEL_LED_OK)|(0<<PIN_SOLAR_PANEL_LED_LOW))		;PRENDE POR CERO.
	OUTPUT	PORTC,AUX
RET

INDICATE_SOLAR_PANEL_OK:
	INPUT	AUX,PORTC
	ANDI	AUX,(~((1<<PIN_SOLAR_PANEL_LED_OK)|(1<<PIN_SOLAR_PANEL_LED_LOW)))
	ORI		AUX,((0<<PIN_SOLAR_PANEL_LED_OK)|(1<<PIN_SOLAR_PANEL_LED_LOW))		;PRENDE POR CERO.
	OUTPUT	PORTC,AUX
	CLC										;[CARRY=1]: SOLAR_PANEL LOW. [CARRY=0]: SOLAR_PANEL OK
RET


ORIENTATE_SOLAR_PANEL:
;YA ESTAN LOS PROMEDIOS DE LOS LDR Y HAY QUE COMPARAR Y MOVER EL PANEL.
;PRIMERO EN ASIMUT, LUEGO EN ELEVACION.
;EL SOL SALE DEL ESTE Y SE PONE EN EL OESTE.
	;SI AMBOS SON 0xFn NO SE MUEVE
	INPUT AUX,LDR_NO_MEAN
	INPUT AUX1,LDR_NE_MEAN
	ANDI	AUX,0xF0
	ANDI	AUX1,0xF0
	CPI		AUX,0xF0
	BRNE	NO_SON_F
	SUB		AUX,AUX1
	BREQ	AMBOS_SON_F
NO_SON_F:
	;COMPARAR_NO_NE:
		INPUT AUX,LDR_NO_MEAN
		INPUT AUX1,LDR_NE_MEAN
		ANDI	AUX,0xF0
		ANDI	AUX1,0xF0
		CP AUX,AUX1
		BRLO _MOTOR_AZIMUT_EAST
	RETURN_MOTOR_AZIMUT_EAST:

		INPUT AUX,LDR_NO_MEAN
		INPUT AUX1,LDR_NE_MEAN
		ANDI	AUX,0xF0
		ANDI	AUX1,0xF0
		CP AUX1,AUX
		BRLO _MOTOR_AZIMUT_WEST
	RETURN_MOTOR_AZIMUT_WEST:

AMBOS_SON_F:


RET

_MOTOR_AZIMUT_EAST:
	SUB AUX,AUX1
	ORI	AUX,0x80
	MOV	AUX3,AUX

	RCALL MOTOR_AZIMUT_EAST
		RCALL DELAY_50ms
		RCALL DELAY_50ms
	RCALL MOTORS_OFF
		RCALL DELAY_500ms
		RCALL DELAY_500ms
RJMP RETURN_MOTOR_AZIMUT_EAST

_MOTOR_AZIMUT_WEST:
	SUB AUX1,AUX
	ORI	AUX1,0x80
	MOV	AUX3,AUX1

	RCALL MOTOR_AZIMUT_WEST
		RCALL DELAY_50ms
		RCALL DELAY_50ms
	RCALL MOTORS_OFF
		RCALL DELAY_500ms
		RCALL DELAY_500ms
RJMP RETURN_MOTOR_AZIMUT_WEST

/*
_MOTOR_AZIMUT_OFF:
RCALL MOTORS_OFF
RJMP RETURN_MOTORS_OFF

_MOTOR_ELEVATION_SOUTH:
RCALL MOTOR_ELEVATION_SOUTH
RJMP RETURN_MOTOR_ELEVATION_SOUTH

_MOTOR_ELEVATION_NORTH:
RCALL MOTOR_ELEVATION_NORTH
RJMP RETURN_MOTOR_ELEVATION_NORTH
*/

/*
		INPUT AUX,LDR_NO_MEAN
		INPUT AUX1,LDR_NE_MEAN
		CP AUX,AUX1
		BREQ _MOTOR_AZIMUT_OFF
	RETURN_MOTORS_OFF:

	;COMPARAR_NO_SO:
		INPUT AUX,LDR_NO_MEAN
		INPUT AUX1,LDR_SO_MEAN
		CP AUX,AUX1
;MEJORAR: VER LA RESTA Y MOVER EN FUNCION DE ESO
		BRLO _MOTOR_ELEVATION_UP
	RETURN_MOTOR_ELEVATION_UP:

		INPUT AUX,LDR_NO_MEAN
		INPUT AUX1,LDR_SO_MEAN
		CP AUX1,AUX
		BRLO _MOTOR_ELEVATION_DOWN
	RETURN_MOTOR_ELEVATION_DOWN:

		INPUT AUX,LDR_NO_MEAN
		INPUT AUX1,LDR_SO_MEAN
		CP AUX,AUX1
		BREQ _MOTOR_ELEVATION_OFF
	RETURN_MOTOR_ELEVATION_OFF:
*/

VPANEL_TO_BT:
						LDIW X,V_SOLAR_PANEL_DATA	;Apunto a la sección de memoria donde se guarda la tensión a panel a transmitir
						LDIW Z,VPANEL_FIRST_DIG_TABLE*2
VPANEL_SEC_DIGIT:		CPI ADC_DATA_H,128
						BRSH VPANEL_SEC_DIGIT_ONE
						STI X+,48+0					;Pongo un 0 ASCII en RAM ¿ES LO MISMO QUE STI X+,'0'???
VPANEL_FIRST_DIGIT:		RCALL VPANEL_FIRST_DIG_CP
						;STI X+,'.'					;Pongo un '.' ASCII en RAM
						LDIW Z,VPANEL_FIRST_DIG_TABLE*2
VPANEL_DECIMAL:			RCALL VPANEL_DEC_CP
						;STI X+,'V'					;Pongo un '.' ASCII en RAM
						;STI X,0					;Pongo un '0' en RAM COMO FIN DE LA CADENA
RET


VPANEL_SEC_DIGIT_ONE:
				STI X+,48+1	;Pongo un 1 ASCII en RAM
				RJMP VPANEL_FIRST_DIGIT

VPANEL_FIRST_DIG_CP:
						CPI ADC_DATA_H,12
						BRLO VPANEL_FIRST_DIG_IS_0
						CPI ADC_DATA_H,25
						BRLO VPANEL_FIRST_DIG_IS_1
						CPI ADC_DATA_H,38
						BRLO VPANEL_FIRST_DIG_IS_2
						CPI ADC_DATA_H,51
						BRLO VPANEL_FIRST_DIG_IS_3
						CPI ADC_DATA_H,64
						BRLO VPANEL_FIRST_DIG_IS_4
						CPI ADC_DATA_H,76
						BRLO VPANEL_FIRST_DIG_IS_5
						CPI ADC_DATA_H,89
						BRLO VPANEL_FIRST_DIG_IS_6
						CPI ADC_DATA_H,102
						BRLO VPANEL_FIRST_DIG_IS_7
						CPI ADC_DATA_H,115
						BRLO VPANEL_FIRST_DIG_IS_8
						CPI ADC_DATA_H,127
						BRLO VPANEL_FIRST_DIG_IS_9
						CPI ADC_DATA_H,141
						BRLO VPANEL_FIRST_DIG_IS_0
						CPI ADC_DATA_H,153
						BRLO VPANEL_FIRST_DIG_IS_1
						CPI ADC_DATA_H,166
						BRLO VPANEL_FIRST_DIG_IS_2
						CPI ADC_DATA_H,179
						BRLO VPANEL_FIRST_DIG_IS_3
						CPI ADC_DATA_H,192
						BRLO VPANEL_FIRST_DIG_IS_4
						CPI ADC_DATA_H,205
						BRLO VPANEL_FIRST_DIG_IS_5
						CPI ADC_DATA_H,217
						BRLO VPANEL_FIRST_DIG_IS_6
						CPI ADC_DATA_H,230
						BRLO VPANEL_FIRST_DIG_IS_7
						CPI ADC_DATA_H,243
						BRLO VPANEL_FIRST_DIG_IS_8
						RJMP VPANEL_FIRST_DIG_IS_9
END_VPANEL_FIRST_DIG:	RET

VPANEL_FIRST_DIG_IS_0:
				STI X+,48+0	;Pongo el 0 ASCII en RAM
				CLR AUX						
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_1:
				STI X+,48+1	;Pongo el 1 ASCII en RAM
				LDI AUX,1									;	¿PQ LDI DESPS DE STI????????
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_2:
				STI X+,48+2	;Pongo el 2 ASCII en RAM
				LDI AUX,2
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_3:
				STI X+,48+3	;Pongo el 3 ASCII en RAM
				LDI AUX,3
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_4:
				STI X+,48+4	;Pongo el 4 ASCII en RAM
				LDI AUX,4
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_5:
				STI X+,48+5	;Pongo el 5 ASCII en RAM
				LDI AUX,5
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_6:
				STI X+,48+6	;Pongo el 6 ASCII en RAM
				LDI AUX,6
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_7:
				STI X+,48+7	;Pongo el 7 ASCII en RAM
				LDI AUX,7
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_8:
				STI X+,48+8	;Pongo el 8 ASCII en RAM
				LDI AUX,8
				RJMP END_VPANEL_FIRST_DIG

VPANEL_FIRST_DIG_IS_9:
				STI X+,48+9	;Pongo el 9 ASCII en RAM
				LDI AUX,9
				RJMP END_VPANEL_FIRST_DIG

VPANEL_DEC_CP:	ADDP Z,AUX
				LPM AUX,Z
				SUB AUX,ADC_DATA_H
				LDIW Z,VPANEL_DEC_TABLE*2
				ADDP Z,AUX
				LPM AUX,Z
				ADDI AUX1,48
				ST X,AUX1	;El ASCII del número en AUX.
RET
